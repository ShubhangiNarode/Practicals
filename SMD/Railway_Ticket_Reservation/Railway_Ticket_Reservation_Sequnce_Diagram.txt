Sure! Here's a **complete step-by-step guide** to create a **Sequence Diagram for a Railway Management System** in **StarUML**. It includes:

‚úÖ Objects
‚úÖ Synchronous & Asynchronous Messages
‚úÖ Return Messages
‚úÖ Interaction Operators (`alt`, `opt`, `loop`)
‚úÖ Focus of Control

---

## üéØ **Sequence Diagram: Railway Management System**

### üîß **Step 1: Create Sequence Diagram**

* Open **StarUML**
* Go to: `Model > Add Diagram > Sequence Diagram`
* Name it: **Railway Reservation Sequence Diagram**

---

### üë§ **Step 2: Add Lifelines (Objects/Participants)**

Use **Lifeline Tool** to add:

1. `Passenger`
2. `ReservationClerk` or `OnlinePortal`
3. `RailwaySystem`
4. `TrainScheduleService`
5. `PaymentGateway`
6. `NotificationService`

---

### üîÅ **Step 3: Add Messages**

---

#### ‚úÖ **Check Train Availability (Synchronous)**

* `Passenger ‚Üí ReservationClerk`: `searchTrains(source, destination, date)`
* `ReservationClerk ‚Üí RailwaySystem`: `checkAvailability()`
* `RailwaySystem ‚Üí TrainScheduleService`: `getTrainsList()`
* `TrainScheduleService ‚Üí RailwaySystem`: `trainList` (return)
* `RailwaySystem ‚Üí ReservationClerk`: `displayTrains()`
* `ReservationClerk ‚Üí Passenger`: `showAvailableTrains()`

---

#### ‚úÖ **Book Ticket (Synchronous + alt)**

* `Passenger ‚Üí ReservationClerk`: `bookTicket(trainId, class)`
* `ReservationClerk ‚Üí RailwaySystem`: `initiateBooking()`
* `RailwaySystem ‚Üí PaymentGateway`: `processPayment()`
* Add **alt fragment**:

  * **\[payment successful]**: proceed to confirm booking
  * **\[payment failed]**: send error message

---

#### ‚úÖ **Send Confirmation (Asynchronous + opt)**

* If payment success (inside `opt` fragment):

  * `RailwaySystem ‚Üí NotificationService`: `sendConfirmationEmail()`
    **Asynchronous**
  * `NotificationService ‚Üí Passenger`: `Email Sent` (return)

---

#### üîÅ **Step 4: Add Interaction Fragments**

| Fragment | Use                                       | Guard/Condition              |
| -------- | ----------------------------------------- | ---------------------------- |
| `loop`   | Retry train search if no trains available | `while trainList empty`      |
| `alt`    | Payment success or failure                | `[if paymentSuccess]` / else |
| `opt`    | Send confirmation only on success         | `[bookingConfirmed]`         |

---

### üßæ **Message Table Summary**

| From                | To                   | Message                 | Type        |
| ------------------- | -------------------- | ----------------------- | ----------- |
| Passenger           | ReservationClerk     | searchTrains()          | Synchronous |
| ReservationClerk    | RailwaySystem        | checkAvailability()     | Synchronous |
| RailwaySystem       | TrainScheduleService | getTrainsList()         | Synchronous |
| Passenger           | ReservationClerk     | bookTicket()            | Synchronous |
| RailwaySystem       | PaymentGateway       | processPayment()        | Synchronous |
| RailwaySystem       | NotificationService  | sendConfirmationEmail() | **Async**   |
| NotificationService | Passenger            | Email Sent              | Return      |

---

### ‚ú≥Ô∏è Focus of Control

* In StarUML, when you add messages between lifelines, the vertical boxes (focus of control) are added automatically to show the active time for each object.

---

## ‚≠ê **Optional Enhancements**

You can also add:

* An actor lifeline for **Admin** (to update schedules).
* `loop` fragment for retrying failed payments.
* `create` message when a ticket is generated (optional).

---

Would you like an image version of this diagram for reference?
